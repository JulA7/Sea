⁄Ï
AC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\StaticHelper.cs
public 
static 
class 
StaticHelper  
{ 
public 

static 
string 
[ 
, 
] 
ConvertToMatrix +
(+ ,
string, 2
[2 3
]3 4
[4 5
]5 6
jaggedArray7 B
)B C
{ 
int		 
rows		 
=		 
jaggedArray		 
.		 
Length		 %
;		% &
int

 
cols

 
=

 
$num

 
;

 
for 
( 
int 
i 
= 
$num 
; 
i 
< 
rows  
;  !
i" #
++# %
)% &
{ 	
if 
( 
jaggedArray 
[ 
i 
] 
. 
Length %
>& '
cols( ,
), -
{ 
cols 
= 
jaggedArray "
[" #
i# $
]$ %
.% &
Length& ,
;, -
} 
} 	
string 
[ 
, 
] 
matrix 
= 
new 
string %
[% &
rows& *
,* +
cols, 0
]0 1
;1 2
for 
( 
int 
i 
= 
$num 
; 
i 
< 
rows  
;  !
i" #
++# %
)% &
{ 	
for 
( 
int 
j 
= 
$num 
; 
j 
< 
jaggedArray  +
[+ ,
i, -
]- .
.. /
Length/ 5
;5 6
j7 8
++8 :
): ;
{ 
matrix 
[ 
i 
, 
j 
] 
= 
jaggedArray *
[* +
i+ ,
], -
[- .
j. /
]/ 0
;0 1
} 
} 	
return!! 
matrix!! 
;!! 
}"" 
public## 

static## 
string## 
[## 
]## 
[## 
]##  
ConvertToJaggedArray## 1
(##1 2
string##2 8
[##8 9
,##9 :
]##: ;!
multiDimensionalArray##< Q
)##Q R
{$$ 
int%% 
rows%% 
=%% !
multiDimensionalArray%% (
.%%( )
	GetLength%%) 2
(%%2 3
$num%%3 4
)%%4 5
;%%5 6
int&& 
cols&& 
=&& !
multiDimensionalArray&& (
.&&( )
	GetLength&&) 2
(&&2 3
$num&&3 4
)&&4 5
;&&5 6
string)) 
[)) 
])) 
[)) 
])) 
jaggedArray)) 
=))  
new))! $
string))% +
[))+ ,
rows)), 0
]))0 1
[))1 2
]))2 3
;))3 4
for++ 
(++ 
int++ 
i++ 
=++ 
$num++ 
;++ 
i++ 
<++ 
rows++  
;++  !
i++" #
++++# %
)++% &
{,, 	
jaggedArray.. 
[.. 
i.. 
].. 
=.. 
new..  
string..! '
[..' (
cols..( ,
].., -
;..- .
for00 
(00 
int00 
j00 
=00 
$num00 
;00 
j00 
<00 
cols00  $
;00$ %
j00& '
++00' )
)00) *
{11 
jaggedArray33 
[33 
i33 
]33 
[33 
j33  
]33  !
=33" #!
multiDimensionalArray33$ 9
[339 :
i33: ;
,33; <
j33= >
]33> ?
;33? @
}44 
}55 	
return77 
jaggedArray77 
;77 
}88 
public== 

static== 
int== 
[== 
]== 
[== 
]==  
ConvertToJaggedArray== .
(==. /
List==/ 3
<==3 4
(==4 5
int==5 8
Row==9 <
,==< =
int==> A
Column==B H
)==H I
>==I J
list==K O
)==O P
{>> 
int@@ 
[@@ 
]@@ 
[@@ 
]@@ 
jaggedArray@@ 
=@@ 
new@@ !
int@@" %
[@@% &
list@@& *
.@@* +
Count@@+ 0
]@@0 1
[@@1 2
]@@2 3
;@@3 4
intAA 
iAA 
=AA 
$numAA 
;AA 
listBB 
.BB 
ForEachBB 
(BB 
actionBB 
=>BB 
{CC 	
varDD 
tempDD 
=DD 
newDD 
intDD 
[DD 
$numDD  
]DD  !
;DD! "
tempEE 
[EE 
$numEE 
]EE 
=EE 
actionEE 
.EE 
RowEE  
;EE  !
tempFF 
[FF 
$numFF 
]FF 
=FF 
actionFF 
.FF 
ColumnFF #
;FF# $
jaggedArrayGG 
[GG 
iGG 
]GG 
=GG 
tempGG !
;GG! "
iHH 
++HH 
;HH 
}II 	
)II	 

;II
 
returnKK 
jaggedArrayKK 
;KK 
}LL 
publicMM 

staticMM 
ListMM 
<MM 
(MM 
intMM 
RowMM 
,MM  
intMM! $
ColumnMM% +
)MM+ ,
>MM, -
ConvertToListMovesMM. @
(MM@ A
intMMA D
[MMD E
]MME F
[MMF G
]MMG H
arrayMMI N
)MMN O
{NN 
ListOO 
<OO 
(OO 
intOO 
RowOO 
,OO 
intOO 
ColumnOO !
)OO! "
>OO" #
listOO$ (
=OO) *
newOO+ .
ListOO/ 3
<OO3 4
(OO4 5
intOO5 8
RowOO9 <
,OO< =
intOO> A
ColumnOOB H
)OOH I
>OOI J
(OOJ K
)OOK L
;OOL M
forQQ 
(QQ 
intQQ 
iQQ 
=QQ 
$numQQ 
;QQ 
iQQ 
<QQ 
arrayQQ !
.QQ! "
LengthQQ" (
;QQ( )
iQQ* +
++QQ+ -
)QQ- .
{RR 	
listSS 
.SS 
AddSS 
(SS 
(SS 
arraySS 
[SS 
iSS 
]SS 
[SS 
$numSS  
]SS  !
,SS! "
arraySS# (
[SS( )
iSS) *
]SS* +
[SS+ ,
$numSS, -
]SS- .
)SS. /
)SS/ 0
;SS0 1
}TT 	
returnVV 
listVV 
;VV 
}WW 
publicXX 

staticXX 
voidXX 
PrintMatricesXX $
(XX$ %
stringXX% +
[XX+ ,
,XX, -
]XX- .
matrix1XX/ 6
,XX6 7
stringXX8 >
[XX> ?
,XX? @
]XX@ A
matrix2XXB I
)XXI J
{YY 
ConsoleZZ 
.ZZ 
	WriteLineZZ 
(ZZ 
$strZZ 
)ZZ 
;ZZ 
Console[[ 
.[[ 
	WriteLine[[ 
([[ 
$str[[ N
)[[N O
;[[O P
Console\\ 
.\\ 
	WriteLine\\ 
(\\ 
$str\\ O
)\\O P
;\\P Q
for^^ 
(^^ 
int^^ 
i^^ 
=^^ 
$num^^ 
;^^ 
i^^ 
<^^ 
$num^^ 
;^^ 
i^^  !
++^^! #
)^^# $
{__ 	
Consoleaa 
.aa 
Writeaa 
(aa 
iaa 
+aa 
$straa #
)aa# $
;aa$ %
fordd 
(dd 
intdd 
jdd 
=dd 
$numdd 
;dd 
jdd 
<dd 
$numdd  "
;dd" #
jdd$ %
++dd% '
)dd' (
{ee 
ifff 
(ff 
matrix1ff 
[ff 
iff 
,ff 
jff  
]ff  !
==ff" $
$strff% (
||ff) +
matrix1ff, 3
[ff3 4
iff4 5
,ff5 6
jff7 8
]ff8 9
==ff: <
$strff= @
)ff@ A
{gg 
Consolehh 
.hh 
BackgroundColorhh +
=hh, -
ConsoleColorhh. :
.hh: ;
Bluehh; ?
;hh? @
}ii 
ifjj 
(jj 
matrix1jj 
[jj 
ijj 
,jj 
jjj  
]jj  !
==jj" $
$strjj% (
||jj) +
matrix1jj, 3
[jj3 4
ijj4 5
,jj5 6
jjj7 8
]jj8 9
==jj: <
$strjj= @
)jj@ A
{kk 
Consolell 
.ll 
BackgroundColorll +
=ll, -
ConsoleColorll. :
.ll: ;
Whitell; @
;ll@ A
}mm 
ifoo 
(oo 
matrix1oo 
[oo 
ioo 
,oo 
joo  
]oo  !
==oo" $
$stroo% (
||oo) +
matrix1oo, 3
[oo3 4
ioo4 5
,oo5 6
joo7 8
]oo8 9
==oo: <
$stroo= @
)oo@ A
{pp 
Consoleqq 
.qq 
ForegroundColorqq +
=qq, -
ConsoleColorqq. :
.qq: ;
DarkRedqq; B
;qqB C
Consolerr 
.rr 
Writerr !
(rr! "
$strrr" &
)rr& '
;rr' (
}ss 
elsett 
{uu 
Consolevv 
.vv 
ForegroundColorvv +
=vv, -
ConsoleColorvv. :
.vv: ;
Blackvv; @
;vv@ A
Consoleww 
.ww 
Writeww !
(ww! "
$strww" &
)ww& '
;ww' (
}yy 
Consolezz 
.zz 

ResetColorzz "
(zz" #
)zz# $
;zz$ %
}{{ 
Console~~ 
.~~ 
Write~~ 
(~~ 
$"~~ 
$str~~ 
{~~  
i~~  !
}~~! "
$str~~" %
"~~% &
)~~& '
;~~' (
for
ÄÄ 
(
ÄÄ 
int
ÄÄ 
j
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
j
ÄÄ 
<
ÄÄ 
$num
ÄÄ  "
;
ÄÄ" #
j
ÄÄ$ %
++
ÄÄ% '
)
ÄÄ' (
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
matrix2
ÇÇ 
[
ÇÇ 
i
ÇÇ 
,
ÇÇ 
j
ÇÇ  
]
ÇÇ  !
==
ÇÇ" $
$str
ÇÇ% (
||
ÇÇ) +
matrix2
ÇÇ, 3
[
ÇÇ3 4
i
ÇÇ4 5
,
ÇÇ5 6
j
ÇÇ7 8
]
ÇÇ8 9
==
ÇÇ: <
$str
ÇÇ= @
)
ÇÇ@ A
{
ÉÉ 
Console
ÑÑ 
.
ÑÑ 
BackgroundColor
ÑÑ +
=
ÑÑ, -
ConsoleColor
ÑÑ. :
.
ÑÑ: ;
Green
ÑÑ; @
;
ÑÑ@ A
}
ÖÖ 
if
ÜÜ 
(
ÜÜ 
matrix2
ÜÜ 
[
ÜÜ 
i
ÜÜ 
,
ÜÜ 
j
ÜÜ  
]
ÜÜ  !
==
ÜÜ" $
$str
ÜÜ% (
||
ÜÜ) +
matrix2
ÜÜ, 3
[
ÜÜ3 4
i
ÜÜ4 5
,
ÜÜ5 6
j
ÜÜ7 8
]
ÜÜ8 9
==
ÜÜ: <
$str
ÜÜ= @
)
ÜÜ@ A
{
áá 
Console
àà 
.
àà 
BackgroundColor
àà +
=
àà, -
ConsoleColor
àà. :
.
àà: ;
White
àà; @
;
àà@ A
}
ââ 
if
ãã 
(
ãã 
matrix2
ãã 
[
ãã 
i
ãã 
,
ãã 
j
ãã  
]
ãã  !
==
ãã" $
$str
ãã% (
||
ãã) +
matrix2
ãã, 3
[
ãã3 4
i
ãã4 5
,
ãã5 6
j
ãã7 8
]
ãã8 9
==
ãã: <
$str
ãã= @
)
ãã@ A
{
åå 
Console
çç 
.
çç 
ForegroundColor
çç +
=
çç, -
ConsoleColor
çç. :
.
çç: ;
DarkRed
çç; B
;
ççB C
Console
éé 
.
éé 
Write
éé !
(
éé! "
$str
éé" &
)
éé& '
;
éé' (
}
èè 
else
êê 
{
ëë 
Console
íí 
.
íí 
ForegroundColor
íí +
=
íí, -
ConsoleColor
íí. :
.
íí: ;
Black
íí; @
;
íí@ A
Console
ìì 
.
ìì 
Write
ìì !
(
ìì! "
$str
ìì" &
)
ìì& '
;
ìì' (
}
ïï 
Console
ññ 
.
ññ 

ResetColor
ññ "
(
ññ" #
)
ññ# $
;
ññ$ %
}
óó 
Console
ôô 
.
ôô 
	WriteLine
ôô 
(
ôô 
)
ôô 
;
ôô  
}
öö 	
Console
õõ 
.
õõ 

ResetColor
õõ 
(
õõ 
)
õõ 
;
õõ 
Console
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú 
)
úú 
;
úú 
}
ûû 
public
üü 

static
üü 
void
üü 
PrintSeaArea
üü #
(
üü# $
string
†† 
[
†† 
,
†† 
]
†† 
myMatrix
†† 
,
†† 
List
°° 
<
°° 
(
°° 
int
°° 
Row
°° 
,
°° 
int
°° 
Column
°° !
)
°°! "
>
°°" #
myMoves
°°$ +
,
°°+ ,
string
¢¢ 
[
¢¢ 
,
¢¢ 
]
¢¢ 
anotherMatrix
¢¢ 
,
¢¢  
List
££ 
<
££ 
(
££ 
int
££ 
Row
££ 
,
££ 
int
££ 
Column
££ !
)
££! "
>
££" #
anotherMovies
££$ 1
)
§§ 	
{
•• 
Console
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ 
)
¶¶ 
;
¶¶ 
Console
ßß 
.
ßß 
	WriteLine
ßß 
(
ßß 
$str
ßß N
)
ßßN O
;
ßßO P
Console
®® 
.
®® 
	WriteLine
®® 
(
®® 
$str
®® O
)
®®O P
;
®®P Q
for
™™ 
(
™™ 
int
™™ 
row
™™ 
=
™™ 
$num
™™ 
;
™™ 
row
™™ 
<
™™ 
$num
™™  "
;
™™" #
row
™™$ '
++
™™' )
)
™™) *
{
´´ 	
Console
≠≠ 
.
≠≠ 
Write
≠≠ 
(
≠≠ 
row
≠≠ 
+
≠≠ 
$str
≠≠  %
)
≠≠% &
;
≠≠& '
for
∞∞ 
(
∞∞ 
int
∞∞ 
column
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞  
column
∞∞! '
<
∞∞( )
$num
∞∞* ,
;
∞∞, -
column
∞∞. 4
++
∞∞4 6
)
∞∞6 7
{
±± 
var
≤≤ #
isEnemyShootThisPoint
≤≤ )
=
≤≤* +
anotherMovies
≤≤, 9
.
≤≤9 :
Exists
≤≤: @
(
≤≤@ A
list
≤≤A E
=>
≤≤F H
row
≤≤I L
==
≤≤M O
list
≤≤P T
.
≤≤T U
Row
≤≤U X
&&
≤≤Y [
column
≤≤\ b
==
≤≤c e
list
≤≤f j
.
≤≤j k
Column
≤≤k q
)
≤≤q r
;
≤≤r s
if
≥≥ 
(
≥≥ 
myMatrix
≥≥ 
[
≥≥ 
row
≥≥  
,
≥≥  !
column
≥≥" (
]
≥≥( )
==
≥≥* ,
$str
≥≥- 0
)
≥≥0 1
{
¥¥ 
Console
µµ 
.
µµ 
BackgroundColor
µµ +
=
µµ, -
ConsoleColor
µµ. :
.
µµ: ;
Blue
µµ; ?
;
µµ? @
}
∂∂ 
if
∑∑ 
(
∑∑ 
myMatrix
∑∑ 
[
∑∑ 
row
∑∑  
,
∑∑  !
column
∑∑" (
]
∑∑( )
==
∑∑* ,
$str
∑∑- 0
)
∑∑0 1
{
∏∏ 
Console
ππ 
.
ππ 
BackgroundColor
ππ +
=
ππ, -
ConsoleColor
ππ. :
.
ππ: ;
White
ππ; @
;
ππ@ A
}
∫∫ 
if
ºº 
(
ºº #
isEnemyShootThisPoint
ºº )
)
ºº) *
{
ΩΩ 
Console
ææ 
.
ææ 
ForegroundColor
ææ +
=
ææ, -
ConsoleColor
ææ. :
.
ææ: ;
Red
ææ; >
;
ææ> ?
Console
øø 
.
øø 
Write
øø !
(
øø! "
$str
øø" &
)
øø& '
;
øø' (
}
¿¿ 
else
¡¡ 
{
¬¬ 
Console
√√ 
.
√√ 
ForegroundColor
√√ +
=
√√, -
ConsoleColor
√√. :
.
√√: ;
Black
√√; @
;
√√@ A
Console
ƒƒ 
.
ƒƒ 
Write
ƒƒ !
(
ƒƒ! "
$str
ƒƒ" &
)
ƒƒ& '
;
ƒƒ' (
}
∆∆ 
Console
«« 
.
«« 

ResetColor
«« "
(
««" #
)
««# $
;
««$ %
}
»» 
Console
ÀÀ 
.
ÀÀ 
Write
ÀÀ 
(
ÀÀ 
$"
ÀÀ 
$str
ÀÀ 
{
ÀÀ  
row
ÀÀ  #
}
ÀÀ# $
$str
ÀÀ$ '
"
ÀÀ' (
)
ÀÀ( )
;
ÀÀ) *
for
ÕÕ 
(
ÕÕ 
int
ÕÕ 
column
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ  
column
ÕÕ! '
<
ÕÕ( )
$num
ÕÕ* ,
;
ÕÕ, -
column
ÕÕ. 4
++
ÕÕ4 6
)
ÕÕ6 7
{
ŒŒ 
var
œœ  
isMeShootThisPoint
œœ &
=
œœ' (
myMoves
œœ) 0
.
œœ0 1
Exists
œœ1 7
(
œœ7 8
list
œœ8 <
=>
œœ= ?
row
œœ@ C
==
œœD F
list
œœG K
.
œœK L
Row
œœL O
&&
œœP R
column
œœS Y
==
œœZ \
list
œœ] a
.
œœa b
Column
œœb h
)
œœh i
;
œœi j
Console
–– 
.
–– 
BackgroundColor
–– '
=
––( )
ConsoleColor
––* 6
.
––6 7
White
––7 <
;
––< =
if
—— 
(
—— 
anotherMatrix
—— !
[
——! "
row
——" %
,
——% &
column
——' -
]
——- .
==
——/ 1
$str
——2 5
&&
——6 8 
isMeShootThisPoint
——9 K
)
——K L
{
““ 
Console
”” 
.
”” 
BackgroundColor
”” +
=
””, -
ConsoleColor
””. :
.
””: ;
Green
””; @
;
””@ A
}
‘‘ 
if
◊◊ 
(
◊◊  
isMeShootThisPoint
◊◊ &
)
◊◊& '
{
ÿÿ 
Console
ŸŸ 
.
ŸŸ 
ForegroundColor
ŸŸ +
=
ŸŸ, -
ConsoleColor
ŸŸ. :
.
ŸŸ: ;
Red
ŸŸ; >
;
ŸŸ> ?
Console
⁄⁄ 
.
⁄⁄ 
Write
⁄⁄ !
(
⁄⁄! "
$str
⁄⁄" &
)
⁄⁄& '
;
⁄⁄' (
}
€€ 
else
‹‹ 
{
›› 
Console
ﬁﬁ 
.
ﬁﬁ 
ForegroundColor
ﬁﬁ +
=
ﬁﬁ, -
ConsoleColor
ﬁﬁ. :
.
ﬁﬁ: ;
Black
ﬁﬁ; @
;
ﬁﬁ@ A
Console
ﬂﬂ 
.
ﬂﬂ 
Write
ﬂﬂ !
(
ﬂﬂ! "
$str
ﬂﬂ" &
)
ﬂﬂ& '
;
ﬂﬂ' (
}
·· 
Console
‚‚ 
.
‚‚ 

ResetColor
‚‚ "
(
‚‚" #
)
‚‚# $
;
‚‚$ %
}
„„ 
Console
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ 
(
ÂÂ 
)
ÂÂ 
;
ÂÂ  
}
ÊÊ 	
Console
ÁÁ 
.
ÁÁ 

ResetColor
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
Console
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË 
$str
ËË 
)
ËË 
;
ËË 
}
ÍÍ 
public
ÏÏ 

static
ÏÏ 
string
ÏÏ 
[
ÏÏ 
,
ÏÏ 
]
ÏÏ 
GetMatrixFromFile
ÏÏ -
(
ÏÏ- .
string
ÏÏ. 4
fileName
ÏÏ5 =
)
ÏÏ= >
{
ÌÌ 
string
ÓÓ 

JsonString
ÓÓ 
=
ÓÓ 
File
ÓÓ  
.
ÓÓ  !
ReadAllText
ÓÓ! ,
(
ÓÓ, -
fileName
ÓÓ- 5
)
ÓÓ5 6
;
ÓÓ6 7
JsonPlayerArea
ÔÔ 
JsonArea
ÔÔ 
=
ÔÔ  !
JsonSerializer
ÔÔ" 0
.
ÔÔ0 1
Deserialize
ÔÔ1 <
<
ÔÔ< =
JsonPlayerArea
ÔÔ= K
>
ÔÔK L
(
ÔÔL M

JsonString
ÔÔM W
)
ÔÔW X
!
ÔÔX Y
;
ÔÔY Z
var
 
matrix
 
=
 
ConvertToMatrix
 $
(
$ %
JsonArea
% -
.
- .
Area
. 2
)
2 3
;
3 4
return
ÚÚ 
matrix
ÚÚ 
;
ÚÚ 
}
ÛÛ 
public
ÙÙ 

static
ÙÙ 
int
ÙÙ +
TransformColumnLetterToNumber
ÙÙ 3
(
ÙÙ3 4
string
ÙÙ4 :
input
ÙÙ; @
)
ÙÙ@ A
{
ıı 
if
ˆˆ 

(
ˆˆ 
input
ˆˆ 
==
ˆˆ 
$str
ˆˆ 
)
ˆˆ 
return
ˆˆ  
$num
ˆˆ! "
;
ˆˆ" #
if
˜˜ 

(
˜˜ 
input
˜˜ 
==
˜˜ 
$str
˜˜ 
)
˜˜ 
return
˜˜  
$num
˜˜! "
;
˜˜" #
if
¯¯ 

(
¯¯ 
input
¯¯ 
==
¯¯ 
$str
¯¯ 
)
¯¯ 
return
¯¯  
$num
¯¯! "
;
¯¯" #
if
˘˘ 

(
˘˘ 
input
˘˘ 
==
˘˘ 
$str
˘˘ 
)
˘˘ 
return
˘˘  
$num
˘˘! "
;
˘˘" #
if
˙˙ 

(
˙˙ 
input
˙˙ 
==
˙˙ 
$str
˙˙ 
)
˙˙ 
return
˙˙  
$num
˙˙! "
;
˙˙" #
if
˚˚ 

(
˚˚ 
input
˚˚ 
==
˚˚ 
$str
˚˚ 
)
˚˚ 
return
˚˚  
$num
˚˚! "
;
˚˚" #
if
¸¸ 

(
¸¸ 
input
¸¸ 
==
¸¸ 
$str
¸¸ 
)
¸¸ 
return
¸¸  
$num
¸¸! "
;
¸¸" #
if
˝˝ 

(
˝˝ 
input
˝˝ 
==
˝˝ 
$str
˝˝ 
)
˝˝ 
return
˝˝  
$num
˝˝! "
;
˝˝" #
if
˛˛ 

(
˛˛ 
input
˛˛ 
==
˛˛ 
$str
˛˛ 
)
˛˛ 
return
˛˛  
$num
˛˛! "
;
˛˛" #
if
ˇˇ 

(
ˇˇ 
input
ˇˇ 
==
ˇˇ 
$str
ˇˇ 
)
ˇˇ 
return
ˇˇ  
$num
ˇˇ! "
;
ˇˇ" #
return
ÄÄ 
-
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
}
ÅÅ 
public
ÉÉ 

static
ÉÉ 
int
ÉÉ !
GetCountHintsInArea
ÉÉ )
(
ÉÉ) *
string
ÉÉ* 0
[
ÉÉ0 1
,
ÉÉ1 2
]
ÉÉ2 3
matrix
ÉÉ4 :
,
ÉÉ: ;
List
ÉÉ< @
<
ÉÉ@ A
(
ÉÉA B
int
ÉÉB E
Row
ÉÉF I
,
ÉÉI J
int
ÉÉK N
Column
ÉÉO U
)
ÉÉU V
>
ÉÉV W
moves
ÉÉX ]
)
ÉÉ] ^
{
ÑÑ 
int
ÖÖ 
	Hit–°ount
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
for
ÜÜ 
(
ÜÜ 
int
ÜÜ 
row
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
row
ÜÜ 
<
ÜÜ 
$num
ÜÜ  "
;
ÜÜ" #
row
ÜÜ$ '
++
ÜÜ' )
)
ÜÜ) *
{
áá 	
for
àà 
(
àà 
int
àà 
column
àà 
=
àà 
$num
àà 
;
àà  
column
àà! '
<
àà( )
$num
àà* ,
;
àà, -
column
àà. 4
++
àà4 6
)
àà6 7
{
ââ 
if
ää 
(
ää 
matrix
ää 
[
ää 
row
ää 
,
ää 
column
ää  &
]
ää& '
==
ää( *
$str
ää+ .
)
ää. /
{
ãã 
var
åå 
isFire
åå 
=
åå  
moves
åå! &
.
åå& '
Exists
åå' -
(
åå- .
point
åå. 3
=>
åå4 6
point
åå7 <
.
åå< =
Column
åå= C
==
ååD F
column
ååG M
&&
ååN P
point
ååQ V
.
ååV W
Row
ååW Z
==
åå[ ]
row
åå^ a
)
ååa b
;
ååb c
if
çç 
(
çç 
isFire
çç 
)
çç 
	Hit–°ount
çç  (
++
çç( *
;
çç* +
}
éé 
}
èè 
}
êê 	
return
ëë 
	Hit–°ount
ëë 
;
ëë 
}
íí 
public
ìì 

static
ìì 
bool
ìì 
	IsEndGame
ìì  
(
ìì  !
string
ìì! '
[
ìì' (
,
ìì( )
]
ìì) *
matrix
ìì+ 1
,
ìì1 2
List
ìì3 7
<
ìì7 8
(
ìì8 9
int
ìì9 <
Row
ìì= @
,
ìì@ A
int
ììB E
Column
ììF L
)
ììL M
>
ììM N
moves
ììO T
)
ììT U
{
îî 
var
ïï 
	Hit–°ount
ïï 
=
ïï !
GetCountHintsInArea
ïï *
(
ïï* +
matrix
ïï+ 1
,
ïï1 2
moves
ïï3 8
)
ïï8 9
;
ïï9 :
return
ññ 
	Hit–°ount
ññ 
==
ññ 
$num
ññ 
;
ññ 
}
óó 
public
òò 

static
òò 
bool
òò %
Is50ProcentGameComplete
òò .
(
òò. /
string
òò/ 5
[
òò5 6
,
òò6 7
]
òò7 8
matrix
òò9 ?
,
òò? @
List
òòA E
<
òòE F
(
òòF G
int
òòG J
Row
òòK N
,
òòN O
int
òòP S
Column
òòT Z
)
òòZ [
>
òò[ \
moves
òò] b
)
òòb c
{
ôô 
var
öö 
	Hit–°ount
öö 
=
öö !
GetCountHintsInArea
öö *
(
öö* +
matrix
öö+ 1
,
öö1 2
moves
öö3 8
)
öö8 9
;
öö9 :
return
õõ 
	Hit–°ount
õõ 
>
õõ 
$num
õõ 
;
õõ 
}
úú 
public
ûû 

static
ûû 
bool
ûû 

IsNewPoint
ûû !
(
ûû! "
List
ûû" &
<
ûû& '
(
ûû' (
int
ûû( +
Row
ûû, /
,
ûû/ 0
int
ûû1 4
Column
ûû5 ;
)
ûû; <
>
ûû< =
moves
ûû> C
,
ûûC D
(
ûûE F
int
ûûF I
Row
ûûJ M
,
ûûM N
int
ûûO R
Column
ûûS Y
)
ûûY Z
point
ûû[ `
)
ûû` a
{
üü 
var
†† 
isExists
†† 
=
†† 
moves
†† 
.
†† 
Exists
†† #
(
††# $
Point
††$ )
=>
††* ,
Point
††- 2
.
††2 3
Column
††3 9
==
††: <
point
††= B
.
††B C
Column
††C I
&&
††J L
Point
††M R
.
††R S
Row
††S V
==
††W Y
point
††Z _
.
††_ `
Row
††` c
)
††c d
;
††d e
return
°° 
!
°° 
isExists
°° 
;
°° 
}
¢¢ 
public
££ 

static
££ 
bool
££ 
CheckPointHit
££ $
(
££$ %
string
££% +
[
££+ ,
,
££, -
]
££- .
matrix
££/ 5
,
££5 6
(
££7 8
int
££8 ;
Row
££< ?
,
££? @
int
££A D
Column
££E K
)
££K L
point
££M R
)
££R S
{
§§ 
return
•• 
matrix
•• 
[
•• 
point
•• 
.
•• 
Row
•• 
,
••  
point
••! &
.
••& '
Column
••' -
]
••- .
==
••/ 1
$str
••2 5
;
••5 6
}
¶¶ 
private
®® 
static
®® 
void
®® 
PointForFigure
®® &
(
®®& '
string
®®' -
[
®®- .
,
®®. /
]
®®/ 0
matrix
®®1 7
,
®®7 8
List
®®9 =
<
®®= >
(
®®> ?
int
®®? B
Row
®®C F
,
®®F G
int
®®H K
Column
®®L R
)
®®R S
>
®®S T
figure
®®U [
,
®®[ \
(
®®] ^
int
®®^ a
Row
®®b e
,
®®e f
int
®®g j
Column
®®k q
)
®®q r
point
®®s x
)
®®x y
{
©© 
var
™™ 
isOk
™™ 
=
™™ 
point
™™ 
.
™™ 
Row
™™ 
>=
™™ 
$num
™™  !
&&
™™" $
point
™™% *
.
™™* +
Row
™™+ .
<
™™/ 0
$num
™™1 3
&&
™™4 6
point
™™7 <
.
™™< =
Column
™™= C
>=
™™D F
$num
™™G H
&&
™™I K
point
™™L Q
.
™™Q R
Column
™™R X
<
™™Y Z
$num
™™[ ]
;
™™] ^
if
´´ 

(
´´ 
!
´´ 
isOk
´´ 
)
´´ 
return
´´ 
;
´´ 
if
≠≠ 

(
≠≠ 
matrix
≠≠ 
[
≠≠ 
point
≠≠ 
.
≠≠ 
Row
≠≠ 
,
≠≠ 
point
≠≠ #
.
≠≠# $
Column
≠≠$ *
]
≠≠* +
==
≠≠, .
$str
≠≠/ 2
)
≠≠2 3
{
ÆÆ 	
var
ØØ 
isExists
ØØ 
=
ØØ 
figure
ØØ !
.
ØØ! "
Exists
ØØ" (
(
ØØ( )
fig
ØØ) ,
=>
ØØ- /
fig
ØØ0 3
.
ØØ3 4
Row
ØØ4 7
==
ØØ8 :
point
ØØ; @
.
ØØ@ A
Row
ØØA D
&&
ØØE G
fig
ØØH K
.
ØØK L
Column
ØØL R
==
ØØS U
point
ØØV [
.
ØØ[ \
Column
ØØ\ b
)
ØØb c
;
ØØc d
if
∞∞ 
(
∞∞ 
!
∞∞ 
isExists
∞∞ 
)
∞∞ 
figure
∞∞ !
.
∞∞! "
Add
∞∞" %
(
∞∞% &
(
∞∞& '
point
∞∞' ,
.
∞∞, -
Row
∞∞- 0
,
∞∞0 1
point
∞∞2 7
.
∞∞7 8
Column
∞∞8 >
)
∞∞> ?
)
∞∞? @
;
∞∞@ A
}
±± 	
}
≥≥ 
static
¥¥ 

List
¥¥ 
<
¥¥ 
(
¥¥ 
int
¥¥ 
Row
¥¥ 
,
¥¥ 
int
¥¥ 
Column
¥¥ $
)
¥¥$ %
>
¥¥% &
	GetFigure
¥¥' 0
(
¥¥0 1
string
¥¥1 7
[
¥¥7 8
,
¥¥8 9
]
¥¥9 :
matrix
¥¥; A
,
¥¥A B
(
¥¥C D
int
¥¥D G
Row
¥¥H K
,
¥¥K L
int
¥¥M P
Column
¥¥Q W
)
¥¥W X
point
¥¥Y ^
)
¥¥^ _
{
µµ 
List
∂∂ 
<
∂∂ 
(
∂∂ 
int
∂∂ 
Row
∂∂ 
,
∂∂ 
int
∂∂ 
Column
∂∂ !
)
∂∂! "
>
∂∂" #
Figure
∂∂$ *
=
∂∂+ ,
new
∂∂- 0
List
∂∂1 5
<
∂∂5 6
(
∂∂6 7
int
∂∂7 :
Row
∂∂; >
,
∂∂> ?
int
∂∂@ C
Column
∂∂D J
)
∂∂J K
>
∂∂K L
{
∂∂M N
(
∂∂O P
point
∂∂P U
.
∂∂U V
Row
∂∂V Y
,
∂∂Y Z
point
∂∂[ `
.
∂∂` a
Column
∂∂a g
)
∂∂g h
}
∂∂i j
;
∂∂j k
for
∑∑ 
(
∑∑ 
int
∑∑ 
i
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
i
∑∑ 
<
∑∑ 
$num
∑∑ 
;
∑∑ 
i
∑∑  
++
∑∑  "
)
∑∑" #
{
∏∏ 	
List
ππ 
<
ππ 
(
ππ 
int
ππ 
Row
ππ 
,
ππ 
int
ππ 
Column
ππ %
)
ππ% &
>
ππ& '
FigureClone
ππ( 3
=
ππ4 5
new
ππ6 9
List
ππ: >
<
ππ> ?
(
ππ? @
int
ππ@ C
Row
ππD G
,
ππG H
int
ππI L
Column
ππM S
)
ππS T
>
ππT U
(
ππU V
Figure
ππV \
)
ππ\ ]
;
ππ] ^
FigureClone
∫∫ 
.
∫∫ 
ForEach
∫∫ 
(
∫∫  
figurePoint
∫∫  +
=>
∫∫, .
{
ªª 
var
ΩΩ 
(
ΩΩ 
TopRow
ΩΩ 
,
ΩΩ 
	TopColumn
ΩΩ &
)
ΩΩ& '
=
ΩΩ( )
(
ΩΩ* +
figurePoint
ΩΩ+ 6
.
ΩΩ6 7
Row
ΩΩ7 :
-
ΩΩ; <
$num
ΩΩ= >
,
ΩΩ> ?
figurePoint
ΩΩ@ K
.
ΩΩK L
Column
ΩΩL R
)
ΩΩR S
;
ΩΩS T
var
ææ 
(
ææ 
	BottomRow
ææ 
,
ææ 
BottomColumn
ææ  ,
)
ææ, -
=
ææ. /
(
ææ0 1
figurePoint
ææ1 <
.
ææ< =
Row
ææ= @
+
ææA B
$num
ææC D
,
ææD E
figurePoint
ææF Q
.
ææQ R
Column
ææR X
)
ææX Y
;
ææY Z
var
øø 
(
øø 
RightRow
øø 
,
øø 
RightColumn
øø *
)
øø* +
=
øø, -
(
øø. /
figurePoint
øø/ :
.
øø: ;
Row
øø; >
,
øø> ?
figurePoint
øø@ K
.
øøK L
Column
øøL R
+
øøS T
$num
øøU V
)
øøV W
;
øøW X
var
¿¿ 
(
¿¿ 
LeftRow
¿¿ 
,
¿¿ 

LeftColumn
¿¿ (
)
¿¿( )
=
¿¿* +
(
¿¿, -
figurePoint
¿¿- 8
.
¿¿8 9
Row
¿¿9 <
,
¿¿< =
figurePoint
¿¿> I
.
¿¿I J
Column
¿¿J P
-
¿¿Q R
$num
¿¿S T
)
¿¿T U
;
¿¿U V
PointForFigure
¬¬ 
(
¬¬ 
matrix
¬¬ %
,
¬¬% &
Figure
¬¬' -
,
¬¬- .
(
¬¬/ 0
TopRow
¬¬0 6
,
¬¬6 7
	TopColumn
¬¬8 A
)
¬¬A B
)
¬¬B C
;
¬¬C D
PointForFigure
√√ 
(
√√ 
matrix
√√ %
,
√√% &
Figure
√√' -
,
√√- .
(
√√/ 0
	BottomRow
√√0 9
,
√√9 :
BottomColumn
√√; G
)
√√G H
)
√√H I
;
√√I J
PointForFigure
ƒƒ 
(
ƒƒ 
matrix
ƒƒ %
,
ƒƒ% &
Figure
ƒƒ' -
,
ƒƒ- .
(
ƒƒ/ 0
RightRow
ƒƒ0 8
,
ƒƒ8 9
RightColumn
ƒƒ: E
)
ƒƒE F
)
ƒƒF G
;
ƒƒG H
PointForFigure
≈≈ 
(
≈≈ 
matrix
≈≈ %
,
≈≈% &
Figure
≈≈' -
,
≈≈- .
(
≈≈/ 0
LeftRow
≈≈0 7
,
≈≈7 8

LeftColumn
≈≈9 C
)
≈≈C D
)
≈≈D E
;
≈≈E F
}
«« 
)
«« 
;
«« 
}
»» 	
return
   
Figure
   
;
   
}
ÀÀ 
public
ÃÃ 

static
ÃÃ 
bool
ÃÃ 
CheckPointKill
ÃÃ %
(
ÃÃ% &
string
ÃÃ& ,
[
ÃÃ, -
,
ÃÃ- .
]
ÃÃ. /
matrix
ÃÃ0 6
,
ÃÃ6 7
List
ÃÃ8 <
<
ÃÃ< =
(
ÃÃ= >
int
ÃÃ> A
Row
ÃÃB E
,
ÃÃE F
int
ÃÃG J
Column
ÃÃK Q
)
ÃÃQ R
>
ÃÃR S
moves
ÃÃT Y
,
ÃÃY Z
(
ÃÃ[ \
int
ÃÃ\ _
Row
ÃÃ` c
,
ÃÃc d
int
ÃÃe h
Column
ÃÃi o
)
ÃÃo p
point
ÃÃq v
)
ÃÃv w
{
ÕÕ 
List
ŒŒ 
<
ŒŒ 
(
ŒŒ 
int
ŒŒ 
Row
ŒŒ 
,
ŒŒ 
int
ŒŒ 
Column
ŒŒ !
)
ŒŒ! "
>
ŒŒ" #
Figure
ŒŒ$ *
=
ŒŒ+ ,
	GetFigure
ŒŒ- 6
(
ŒŒ6 7
matrix
ŒŒ7 =
,
ŒŒ= >
point
ŒŒ? D
)
ŒŒD E
;
ŒŒE F
bool
–– 
IsKill
–– 
=
–– 
true
–– 
;
–– 
Figure
““ 
.
““ 
ForEach
““ 
(
““ 
figure
““ 
=>
““  
{
”” 	
var
‘‘ 
isExists
‘‘ 
=
‘‘ 
moves
‘‘  
.
‘‘  !
Exists
‘‘! '
(
‘‘' (
move
‘‘( ,
=>
‘‘- /
move
‘‘0 4
.
‘‘4 5
Row
‘‘5 8
==
‘‘9 ;
figure
‘‘< B
.
‘‘B C
Row
‘‘C F
&&
‘‘G I
move
‘‘J N
.
‘‘N O
Column
‘‘O U
==
‘‘V X
figure
‘‘Y _
.
‘‘_ `
Column
‘‘` f
)
‘‘f g
;
‘‘g h
IsKill
’’ 
=
’’ 
IsKill
’’ 
&&
’’ 
isExists
’’ '
;
’’' (
}
÷÷ 	
)
÷÷	 

;
÷÷
 
return
ÿÿ 
IsKill
ÿÿ 
;
ÿÿ 
}
ŸŸ 
public
⁄⁄ 

static
⁄⁄ 
List
⁄⁄ 
<
⁄⁄ 
(
⁄⁄ 
int
⁄⁄ 
Row
⁄⁄ 
,
⁄⁄  
int
⁄⁄! $
Column
⁄⁄% +
)
⁄⁄+ ,
>
⁄⁄, -!
GetPointArounFigure
⁄⁄. A
(
⁄⁄A B
string
⁄⁄B H
[
⁄⁄H I
,
⁄⁄I J
]
⁄⁄J K
matrix
⁄⁄L R
,
⁄⁄R S
List
⁄⁄T X
<
⁄⁄X Y
(
⁄⁄Y Z
int
⁄⁄Z ]
Row
⁄⁄^ a
,
⁄⁄a b
int
⁄⁄c f
Column
⁄⁄g m
)
⁄⁄m n
>
⁄⁄n o
moves
⁄⁄p u
,
⁄⁄u v
(
⁄⁄w x
int
⁄⁄x {
Row
⁄⁄| 
,⁄⁄ Ä
int⁄⁄Å Ñ
Column⁄⁄Ö ã
)⁄⁄ã å
point⁄⁄ç í
)⁄⁄í ì
{
€€ 
List
‹‹ 
<
‹‹ 
(
‹‹ 
int
‹‹ 
Row
‹‹ 
,
‹‹ 
int
‹‹ 
Column
‹‹ !
)
‹‹! "
>
‹‹" #
Points
‹‹$ *
=
‹‹+ ,
new
‹‹- 0
List
‹‹1 5
<
‹‹5 6
(
‹‹6 7
int
‹‹7 :
Row
‹‹; >
,
‹‹> ?
int
‹‹@ C
Column
‹‹D J
)
‹‹J K
>
‹‹K L
(
‹‹L M
)
‹‹M N
;
‹‹N O
List
›› 
<
›› 
(
›› 
int
›› 
Row
›› 
,
›› 
int
›› 
Column
›› !
)
››! "
>
››" #
Figure
››$ *
=
››+ ,
	GetFigure
››- 6
(
››6 7
matrix
››7 =
,
››= >
point
››? D
)
››D E
;
››E F
Figure
ﬂﬂ 
.
ﬂﬂ 
ForEach
ﬂﬂ 
(
ﬂﬂ 
figure
ﬂﬂ 
=>
ﬂﬂ  
{
‡‡ 	
Points
·· 
.
·· 
Add
·· 
(
·· 
figure
·· 
)
·· 
;
·· 
var
„„ 
p1
„„ 
=
„„ 
(
„„ 
figure
„„ 
.
„„ 
Row
„„  
-
„„! "
$num
„„# $
,
„„$ %
figure
„„& ,
.
„„, -
Column
„„- 3
-
„„4 5
$num
„„6 7
)
„„7 8
;
„„8 9
var
‰‰ 
p2
‰‰ 
=
‰‰ 
(
‰‰ 
figure
‰‰ 
.
‰‰ 
Row
‰‰  
,
‰‰  !
figure
‰‰" (
.
‰‰( )
Column
‰‰) /
-
‰‰0 1
$num
‰‰2 3
)
‰‰3 4
;
‰‰4 5
var
ÂÂ 
p3
ÂÂ 
=
ÂÂ 
(
ÂÂ 
figure
ÂÂ 
.
ÂÂ 
Row
ÂÂ  
+
ÂÂ! "
$num
ÂÂ# $
,
ÂÂ$ %
figure
ÂÂ& ,
.
ÂÂ, -
Column
ÂÂ- 3
-
ÂÂ4 5
$num
ÂÂ6 7
)
ÂÂ7 8
;
ÂÂ8 9
var
ÁÁ 
p4
ÁÁ 
=
ÁÁ 
(
ÁÁ 
figure
ÁÁ 
.
ÁÁ 
Row
ÁÁ  
-
ÁÁ! "
$num
ÁÁ# $
,
ÁÁ$ %
figure
ÁÁ& ,
.
ÁÁ, -
Column
ÁÁ- 3
)
ÁÁ3 4
;
ÁÁ4 5
var
ËË 
p5
ËË 
=
ËË 
(
ËË 
figure
ËË 
.
ËË 
Row
ËË  
,
ËË  !
figure
ËË" (
.
ËË( )
Column
ËË) /
)
ËË/ 0
;
ËË0 1
var
ÈÈ 
p6
ÈÈ 
=
ÈÈ 
(
ÈÈ 
figure
ÈÈ 
.
ÈÈ 
Row
ÈÈ  
+
ÈÈ! "
$num
ÈÈ# $
,
ÈÈ$ %
figure
ÈÈ& ,
.
ÈÈ, -
Column
ÈÈ- 3
)
ÈÈ3 4
;
ÈÈ4 5
var
ÎÎ 
p7
ÎÎ 
=
ÎÎ 
(
ÎÎ 
figure
ÎÎ 
.
ÎÎ 
Row
ÎÎ  
-
ÎÎ! "
$num
ÎÎ# $
,
ÎÎ$ %
figure
ÎÎ& ,
.
ÎÎ, -
Column
ÎÎ- 3
+
ÎÎ4 5
$num
ÎÎ6 7
)
ÎÎ7 8
;
ÎÎ8 9
var
ÏÏ 
p8
ÏÏ 
=
ÏÏ 
(
ÏÏ 
figure
ÏÏ 
.
ÏÏ 
Row
ÏÏ  
,
ÏÏ  !
figure
ÏÏ" (
.
ÏÏ( )
Column
ÏÏ) /
+
ÏÏ0 1
$num
ÏÏ2 3
)
ÏÏ3 4
;
ÏÏ4 5
var
ÌÌ 
p9
ÌÌ 
=
ÌÌ 
(
ÌÌ 
figure
ÌÌ 
.
ÌÌ 
Row
ÌÌ  
+
ÌÌ! "
$num
ÌÌ# $
,
ÌÌ$ %
figure
ÌÌ& ,
.
ÌÌ, -
Column
ÌÌ- 3
+
ÌÌ4 5
$num
ÌÌ6 7
)
ÌÌ7 8
;
ÌÌ8 9
if
ÔÔ 
(
ÔÔ 
p1
ÔÔ 
.
ÔÔ 
Item1
ÔÔ 
>=
ÔÔ 
$num
ÔÔ 
&&
ÔÔ  
p1
ÔÔ! #
.
ÔÔ# $
Item1
ÔÔ$ )
<
ÔÔ* +
$num
ÔÔ, .
&&
ÔÔ/ 1
p1
ÔÔ2 4
.
ÔÔ4 5
Item2
ÔÔ5 :
>=
ÔÔ; =
$num
ÔÔ> ?
&&
ÔÔ@ B
p1
ÔÔC E
.
ÔÔE F
Item2
ÔÔF K
<
ÔÔL M
$num
ÔÔN P
&&
ÔÔQ S
!
 
Points
 
.
 
Exists
 
(
 
point
 $
=>
% '
point
( -
.
- .
Row
. 1
==
2 4
p1
5 7
.
7 8
Item1
8 =
&&
> @
point
A F
.
F G
Column
G M
==
N P
p1
Q S
.
S T
Item2
T Y
)
Y Z
)
ÒÒ 
Points
ÒÒ 
.
ÒÒ 
Add
ÒÒ 
(
ÒÒ 
p1
ÒÒ 
)
ÒÒ 
;
ÒÒ 
if
ÛÛ 
(
ÛÛ 
p2
ÛÛ 
.
ÛÛ 
Item1
ÛÛ 
>=
ÛÛ 
$num
ÛÛ 
&&
ÛÛ  
p2
ÛÛ! #
.
ÛÛ# $
Item1
ÛÛ$ )
<
ÛÛ* +
$num
ÛÛ, .
&&
ÛÛ/ 1
p2
ÛÛ2 4
.
ÛÛ4 5
Item2
ÛÛ5 :
>=
ÛÛ; =
$num
ÛÛ> ?
&&
ÛÛ@ B
p2
ÛÛC E
.
ÛÛE F
Item2
ÛÛF K
<
ÛÛL M
$num
ÛÛN P
&&
ÛÛQ S
!
ÙÙ 
Points
ÙÙ 
.
ÙÙ 
Exists
ÙÙ 
(
ÙÙ 
point
ÙÙ $
=>
ÙÙ% '
point
ÙÙ( -
.
ÙÙ- .
Row
ÙÙ. 1
==
ÙÙ2 4
p2
ÙÙ5 7
.
ÙÙ7 8
Item1
ÙÙ8 =
&&
ÙÙ> @
point
ÙÙA F
.
ÙÙF G
Column
ÙÙG M
==
ÙÙN P
p2
ÙÙQ S
.
ÙÙS T
Item2
ÙÙT Y
)
ÙÙY Z
)
ıı 
Points
ıı 
.
ıı 
Add
ıı 
(
ıı 
p2
ıı 
)
ıı 
;
ıı 
if
˜˜ 
(
˜˜ 
p3
˜˜ 
.
˜˜ 
Item1
˜˜ 
>=
˜˜ 
$num
˜˜ 
&&
˜˜  
p3
˜˜! #
.
˜˜# $
Item1
˜˜$ )
<
˜˜* +
$num
˜˜, .
&&
˜˜/ 1
p3
˜˜2 4
.
˜˜4 5
Item2
˜˜5 :
>=
˜˜; =
$num
˜˜> ?
&&
˜˜@ B
p3
˜˜C E
.
˜˜E F
Item2
˜˜F K
<
˜˜L M
$num
˜˜N P
&&
˜˜Q S
!
¯¯ 
Points
¯¯ 
.
¯¯ 
Exists
¯¯ 
(
¯¯ 
point
¯¯ $
=>
¯¯% '
point
¯¯( -
.
¯¯- .
Row
¯¯. 1
==
¯¯2 4
p3
¯¯5 7
.
¯¯7 8
Item1
¯¯8 =
&&
¯¯> @
point
¯¯A F
.
¯¯F G
Column
¯¯G M
==
¯¯N P
p3
¯¯Q S
.
¯¯S T
Item2
¯¯T Y
)
¯¯Y Z
)
˘˘ 
Points
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
p3
˘˘ 
)
˘˘ 
;
˘˘ 
if
˚˚ 
(
˚˚ 
p4
˚˚ 
.
˚˚ 
Item1
˚˚ 
>=
˚˚ 
$num
˚˚ 
&&
˚˚  
p4
˚˚! #
.
˚˚# $
Item1
˚˚$ )
<
˚˚* +
$num
˚˚, .
&&
˚˚/ 1
p4
˚˚2 4
.
˚˚4 5
Item2
˚˚5 :
>=
˚˚; =
$num
˚˚> ?
&&
˚˚@ B
p4
˚˚C E
.
˚˚E F
Item2
˚˚F K
<
˚˚L M
$num
˚˚N P
&&
˚˚Q S
!
¸¸ 
Points
¸¸ 
.
¸¸ 
Exists
¸¸ 
(
¸¸ 
point
¸¸ $
=>
¸¸% '
point
¸¸( -
.
¸¸- .
Row
¸¸. 1
==
¸¸2 4
p4
¸¸5 7
.
¸¸7 8
Item1
¸¸8 =
&&
¸¸> @
point
¸¸A F
.
¸¸F G
Column
¸¸G M
==
¸¸N P
p4
¸¸Q S
.
¸¸S T
Item2
¸¸T Y
)
¸¸Y Z
)
˝˝ 
Points
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝ 
p4
˝˝ 
)
˝˝ 
;
˝˝ 
if
ˇˇ 
(
ˇˇ 
p5
ˇˇ 
.
ˇˇ 
Item1
ˇˇ 
>=
ˇˇ 
$num
ˇˇ 
&&
ˇˇ  
p5
ˇˇ! #
.
ˇˇ# $
Item1
ˇˇ$ )
<
ˇˇ* +
$num
ˇˇ, .
&&
ˇˇ/ 1
p5
ˇˇ2 4
.
ˇˇ4 5
Item2
ˇˇ5 :
>=
ˇˇ; =
$num
ˇˇ> ?
&&
ˇˇ@ B
p5
ˇˇC E
.
ˇˇE F
Item2
ˇˇF K
<
ˇˇL M
$num
ˇˇN P
&&
ˇˇQ S
!
ÄÄ 
Points
ÄÄ 
.
ÄÄ 
Exists
ÄÄ 
(
ÄÄ 
point
ÄÄ $
=>
ÄÄ% '
point
ÄÄ( -
.
ÄÄ- .
Row
ÄÄ. 1
==
ÄÄ2 4
p5
ÄÄ5 7
.
ÄÄ7 8
Item1
ÄÄ8 =
&&
ÄÄ> @
point
ÄÄA F
.
ÄÄF G
Column
ÄÄG M
==
ÄÄN P
p5
ÄÄQ S
.
ÄÄS T
Item2
ÄÄT Y
)
ÄÄY Z
)
ÅÅ 
Points
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
p5
ÅÅ 
)
ÅÅ 
;
ÅÅ 
if
ÉÉ 
(
ÉÉ 
p6
ÉÉ 
.
ÉÉ 
Item1
ÉÉ 
>=
ÉÉ 
$num
ÉÉ 
&&
ÉÉ  
p6
ÉÉ! #
.
ÉÉ# $
Item1
ÉÉ$ )
<
ÉÉ* +
$num
ÉÉ, .
&&
ÉÉ/ 1
p6
ÉÉ2 4
.
ÉÉ4 5
Item2
ÉÉ5 :
>=
ÉÉ; =
$num
ÉÉ> ?
&&
ÉÉ@ B
p6
ÉÉC E
.
ÉÉE F
Item2
ÉÉF K
<
ÉÉL M
$num
ÉÉN P
&&
ÉÉQ S
!
ÑÑ 
Points
ÑÑ 
.
ÑÑ 
Exists
ÑÑ 
(
ÑÑ 
point
ÑÑ $
=>
ÑÑ% '
point
ÑÑ( -
.
ÑÑ- .
Row
ÑÑ. 1
==
ÑÑ2 4
p6
ÑÑ5 7
.
ÑÑ7 8
Item1
ÑÑ8 =
&&
ÑÑ> @
point
ÑÑA F
.
ÑÑF G
Column
ÑÑG M
==
ÑÑN P
p6
ÑÑQ S
.
ÑÑS T
Item2
ÑÑT Y
)
ÑÑY Z
)
ÖÖ 
Points
ÖÖ 
.
ÖÖ 
Add
ÖÖ 
(
ÖÖ 
p6
ÖÖ 
)
ÖÖ 
;
ÖÖ 
if
áá 
(
áá 
p7
áá 
.
áá 
Item1
áá 
>=
áá 
$num
áá 
&&
áá  
p7
áá! #
.
áá# $
Item1
áá$ )
<
áá* +
$num
áá, .
&&
áá/ 1
p7
áá2 4
.
áá4 5
Item2
áá5 :
>=
áá; =
$num
áá> ?
&&
áá@ B
p7
ááC E
.
ááE F
Item2
ááF K
<
ááL M
$num
ááN P
&&
ááQ S
!
àà 
Points
àà 
.
àà 
Exists
àà 
(
àà 
point
àà $
=>
àà% '
point
àà( -
.
àà- .
Row
àà. 1
==
àà2 4
p7
àà5 7
.
àà7 8
Item1
àà8 =
&&
àà> @
point
ààA F
.
ààF G
Column
ààG M
==
ààN P
p7
ààQ S
.
ààS T
Item2
ààT Y
)
ààY Z
)
ââ 
Points
ââ 
.
ââ 
Add
ââ 
(
ââ 
p7
ââ 
)
ââ 
;
ââ 
if
ãã 
(
ãã 
p8
ãã 
.
ãã 
Item1
ãã 
>=
ãã 
$num
ãã 
&&
ãã  
p8
ãã! #
.
ãã# $
Item1
ãã$ )
<
ãã* +
$num
ãã, .
&&
ãã/ 1
p8
ãã2 4
.
ãã4 5
Item2
ãã5 :
>=
ãã; =
$num
ãã> ?
&&
ãã@ B
p8
ããC E
.
ããE F
Item2
ããF K
<
ããL M
$num
ããN P
&&
ããQ S
!
åå 
Points
åå 
.
åå 
Exists
åå 
(
åå 
point
åå $
=>
åå% '
point
åå( -
.
åå- .
Row
åå. 1
==
åå2 4
p8
åå5 7
.
åå7 8
Item1
åå8 =
&&
åå> @
point
ååA F
.
ååF G
Column
ååG M
==
ååN P
p8
ååQ S
.
ååS T
Item2
ååT Y
)
ååY Z
)
çç 
Points
çç 
.
çç 
Add
çç 
(
çç 
p8
çç 
)
çç 
;
çç 
if
èè 
(
èè 
p9
èè 
.
èè 
Item1
èè 
>=
èè 
$num
èè 
&&
èè  
p9
èè! #
.
èè# $
Item1
èè$ )
<
èè* +
$num
èè, .
&&
èè/ 1
p9
èè2 4
.
èè4 5
Item2
èè5 :
>=
èè; =
$num
èè> ?
&&
èè@ B
p9
èèC E
.
èèE F
Item2
èèF K
<
èèL M
$num
èèN P
&&
èèQ S
!
êê 
Points
êê 
.
êê 
Exists
êê 
(
êê 
point
êê $
=>
êê% '
point
êê( -
.
êê- .
Row
êê. 1
==
êê2 4
p9
êê5 7
.
êê7 8
Item1
êê8 =
&&
êê> @
point
êêA F
.
êêF G
Column
êêG M
==
êêN P
p9
êêQ S
.
êêS T
Item2
êêT Y
)
êêY Z
)
ëë 
Points
ëë 
.
ëë 
Add
ëë 
(
ëë 
p9
ëë 
)
ëë 
;
ëë 
}
íí 	
)
íí	 

;
íí
 
return
ïï 
Points
ïï 
;
ïï 
}
ññ 
public
óó 

static
óó 
(
óó 
int
óó 
,
óó 
int
óó 
,
óó 
bool
óó !
)
óó! "!
InfoAboutInputPoint
óó# 6
(
óó6 7
string
óó7 =
input
óó> C
)
óóC D
{
òò 
if
ôô 

(
ôô 
input
ôô 
.
ôô 
Length
ôô 
!=
ôô 
$num
ôô 
)
ôô 
return
ôô %
(
ôô& '
$num
ôô' (
,
ôô( )
$num
ôô* +
,
ôô+ ,
false
ôô- 2
)
ôô2 3
;
ôô3 4
var
öö 
Row
öö 
=
öö 
input
öö 
[
öö 
$num
öö 
]
öö 
;
öö 
var
õõ 
isRowInt
õõ 
=
õõ 
int
õõ 
.
õõ 
TryParse
õõ #
(
õõ# $
Row
õõ$ '
.
õõ' (
ToString
õõ( 0
(
õõ0 1
)
õõ1 2
,
õõ2 3
out
õõ4 7
_
õõ8 9
)
õõ9 :
;
õõ: ;
var
úú 
RowInt
úú 
=
úú 
isRowInt
úú 
?
úú 
int
úú  #
.
úú# $
Parse
úú$ )
(
úú) *
Row
úú* -
.
úú- .
ToString
úú. 6
(
úú6 7
)
úú7 8
)
úú8 9
:
úú: ;
$num
úú< =
;
úú= >
var
ùù 
isRowOk
ùù 
=
ùù 
isRowInt
ùù 
&&
ùù !
RowInt
ùù" (
>=
ùù) +
$num
ùù, -
&&
ùù. 0
RowInt
ùù1 7
<=
ùù8 :
$num
ùù; <
;
ùù< =
var
†† 
Column
†† 
=
†† 
input
†† 
[
†† 
$num
†† 
]
†† 
;
†† 
var
°° 
isColumnInt
°° 
=
°° 
int
°° 
.
°° 
TryParse
°° &
(
°°& '
Column
°°' -
.
°°- .
ToString
°°. 6
(
°°6 7
)
°°7 8
,
°°8 9
out
°°: =
_
°°> ?
)
°°? @
;
°°@ A
var
§§ 
	ColumnInt
§§ 
=
§§ 
isColumnInt
§§ #
?
§§$ %
int
§§& )
.
§§) *
Parse
§§* /
(
§§/ 0
Column
§§0 6
.
§§6 7
ToString
§§7 ?
(
§§? @
)
§§@ A
)
§§A B
:
§§C D+
TransformColumnLetterToNumber
§§E b
(
§§b c
Column
§§c i
.
§§i j
ToString
§§j r
(
§§r s
)
§§s t
)
§§t u
;
§§u v
var
¶¶ 

isColumnOk
¶¶ 
=
¶¶ 
	ColumnInt
¶¶ "
!=
¶¶# %
-
¶¶& '
$num
¶¶' (
&&
¶¶) +
	ColumnInt
¶¶, 5
>=
¶¶6 8
$num
¶¶9 :
&&
¶¶; =
	ColumnInt
¶¶> G
<=
¶¶H J
$num
¶¶K L
;
¶¶L M
var
ßß 
	isPointOk
ßß 
=
ßß 

isColumnOk
ßß "
&&
ßß# %
isRowOk
ßß& -
;
ßß- .
return
©© 
(
©© 
RowInt
©© 
,
©© 
	ColumnInt
©© !
,
©©! "
	isPointOk
©©# ,
)
©©, -
;
©©- .
}
™™ 
public
¨¨ 

static
¨¨ 
void
¨¨ 
SaveGameInFile
¨¨ %
(
¨¨% &
GameSeaBattle
¨¨& 3
Game
¨¨4 8
)
¨¨8 9
{
≠≠ 
JsonSaveGame
ÆÆ 
JsonSaveGame
ÆÆ !
=
ÆÆ" #
new
ÆÆ$ '
JsonSaveGame
ÆÆ( 4
(
ÆÆ4 5
)
ÆÆ5 6
;
ÆÆ6 7
JsonSaveGame
ØØ 
.
ØØ 

TurnNumber
ØØ 
=
ØØ  !
Game
ØØ" &
.
ØØ& '

TurnNumber
ØØ' 1
;
ØØ1 2
JsonSaveGame
∞∞ 
.
∞∞ 
CurrentTurnPlayer
∞∞ &
=
∞∞' (
Game
∞∞) -
.
∞∞- .
CurrentTurnPlayer
∞∞. ?
;
∞∞? @
JsonSavePlayer
≤≤ 
JsonSavePlayer1
≤≤ &
=
≤≤' (
new
≤≤) ,
JsonSavePlayer
≤≤- ;
(
≤≤; <
)
≤≤< =
;
≤≤= >
JsonSavePlayer1
≥≥ 
.
≥≥ 
Area
≥≥ 
=
≥≥ "
ConvertToJaggedArray
≥≥ 3
(
≥≥3 4
Game
≥≥4 8
.
≥≥8 9
AreaPlayer1
≥≥9 D
)
≥≥D E
;
≥≥E F
JsonSavePlayer1
¥¥ 
.
¥¥ 
MovesPlayer
¥¥ #
=
¥¥$ %"
ConvertToJaggedArray
¥¥& :
(
¥¥: ;
Game
¥¥; ?
.
¥¥? @
MovesPlayer1
¥¥@ L
)
¥¥L M
;
¥¥M N
JsonSavePlayer
∂∂ 
JsonSavePlayer2
∂∂ &
=
∂∂' (
new
∂∂) ,
JsonSavePlayer
∂∂- ;
(
∂∂; <
)
∂∂< =
;
∂∂= >
JsonSavePlayer2
∑∑ 
.
∑∑ 
Area
∑∑ 
=
∑∑ "
ConvertToJaggedArray
∑∑ 3
(
∑∑3 4
Game
∑∑4 8
.
∑∑8 9
AreaPlayer2
∑∑9 D
)
∑∑D E
;
∑∑E F
JsonSavePlayer2
∏∏ 
.
∏∏ 
MovesPlayer
∏∏ #
=
∏∏$ %"
ConvertToJaggedArray
∏∏& :
(
∏∏: ;
Game
∏∏; ?
.
∏∏? @
MovesPlayer2
∏∏@ L
)
∏∏L M
;
∏∏M N
string
ªª  
JsonSaveGameString
ªª !
=
ªª" #
JsonSerializer
ªª$ 2
.
ªª2 3
	Serialize
ªª3 <
(
ªª< =
JsonSaveGame
ªª= I
)
ªªI J
;
ªªJ K
File
ºº 
.
ºº 
WriteAllText
ºº 
(
ºº 
$str
ºº T
,
ººT U 
JsonSaveGameString
ººV h
)
ººh i
;
ººi j
string
ææ #
JsonSavePlayer1String
ææ $
=
ææ% &
JsonSerializer
ææ' 5
.
ææ5 6
	Serialize
ææ6 ?
(
ææ? @
JsonSavePlayer1
ææ@ O
)
ææO P
;
ææP Q
File
øø 
.
øø 
WriteAllText
øø 
(
øø 
$str
øø ]
,
øø] ^#
JsonSavePlayer1String
øø_ t
)
øøt u
;
øøu v
string
¿¿ #
JsonSavePlayer2String
¿¿ $
=
¿¿% &
JsonSerializer
¿¿' 5
.
¿¿5 6
	Serialize
¿¿6 ?
(
¿¿? @
JsonSavePlayer2
¿¿@ O
)
¿¿O P
;
¿¿P Q
File
¡¡ 
.
¡¡ 
WriteAllText
¡¡ 
(
¡¡ 
$str
¡¡ ]
,
¡¡] ^#
JsonSavePlayer2String
¡¡_ t
)
¡¡t u
;
¡¡u v
}
¬¬ 
public
ƒƒ 

static
ƒƒ 
bool
ƒƒ 
LoadGameFromFile
ƒƒ '
(
ƒƒ' (
GameSeaBattle
ƒƒ( 5
Game
ƒƒ6 :
)
ƒƒ: ;
{
≈≈ 
if
∆∆ 

(
∆∆ 
File
∆∆ 
.
∆∆ 
Exists
∆∆ 
(
∆∆ 
$str
∆∆ R
)
∆∆R S
!=
∆∆T V
true
∆∆W [
||
∆∆\ ^
File
«« 
.
«« 
Exists
«« 
(
«« 
$str
«« [
)
««[ \
!=
««] _
true
««` d
)
««d e
return
»» 
false
»» 
;
»» 
string
   !
Lastgame_JsonString
   "
=
  # $
File
  % )
.
  ) *
ReadAllText
  * 5
(
  5 6
$str
  6 p
)
  p q
;
  q r
JsonSaveGame
ÀÀ 
Lastgame
ÀÀ 
=
ÀÀ 
JsonSerializer
ÀÀ  .
.
ÀÀ. /
Deserialize
ÀÀ/ :
<
ÀÀ: ;
JsonSaveGame
ÀÀ; G
>
ÀÀG H
(
ÀÀH I!
Lastgame_JsonString
ÀÀI \
)
ÀÀ\ ]
!
ÀÀ] ^
;
ÀÀ^ _
Game
ÕÕ 
.
ÕÕ 
CurrentTurnPlayer
ÕÕ 
=
ÕÕ  
Lastgame
ÕÕ! )
.
ÕÕ) *
CurrentTurnPlayer
ÕÕ* ;
;
ÕÕ; <
Game
ŒŒ 
.
ŒŒ 

TurnNumber
ŒŒ 
=
ŒŒ 
Lastgame
ŒŒ "
.
ŒŒ" #

TurnNumber
ŒŒ# -
;
ŒŒ- .
string
–– #
SavePlayer1JsonString
–– $
=
––% &
File
––' +
.
––+ ,
ReadAllText
––, 7
(
––7 8
$str
––8 {
)
––{ |
;
––| }
JsonSavePlayer
—— 
SavePlayer1
—— "
=
——# $
JsonSerializer
——% 3
.
——3 4
Deserialize
——4 ?
<
——? @
JsonSavePlayer
——@ N
>
——N O
(
——O P#
SavePlayer1JsonString
——P e
)
——e f
!
——f g
;
——g h
Game
““ 
.
““ 
MovesPlayer1
““ 
=
““  
ConvertToListMoves
““ .
(
““. /
SavePlayer1
““/ :
.
““: ;
MovesPlayer
““; F
)
““F G
;
““G H
Game
”” 
.
”” 
AreaPlayer1
”” 
=
”” 
ConvertToMatrix
”” *
(
””* +
SavePlayer1
””+ 6
.
””6 7
Area
””7 ;
)
””; <
;
””< =
string
’’ #
SavePlayer2JsonString
’’ $
=
’’% &
File
’’' +
.
’’+ ,
ReadAllText
’’, 7
(
’’7 8
$str
’’8 {
)
’’{ |
;
’’| }
JsonSavePlayer
÷÷ 
SavePlayer2
÷÷ "
=
÷÷# $
JsonSerializer
÷÷% 3
.
÷÷3 4
Deserialize
÷÷4 ?
<
÷÷? @
JsonSavePlayer
÷÷@ N
>
÷÷N O
(
÷÷O P#
SavePlayer2JsonString
÷÷P e
)
÷÷e f
!
÷÷f g
;
÷÷g h
Game
◊◊ 
.
◊◊ 
MovesPlayer2
◊◊ 
=
◊◊  
ConvertToListMoves
◊◊ .
(
◊◊. /
SavePlayer2
◊◊/ :
.
◊◊: ;
MovesPlayer
◊◊; F
)
◊◊F G
;
◊◊G H
Game
ÿÿ 
.
ÿÿ 
AreaPlayer2
ÿÿ 
=
ÿÿ 
ConvertToMatrix
ÿÿ *
(
ÿÿ* +
SavePlayer2
ÿÿ+ 6
.
ÿÿ6 7
Area
ÿÿ7 ;
)
ÿÿ; <
;
ÿÿ< =
return
⁄⁄ 
true
⁄⁄ 
;
⁄⁄ 
}
€€ 
}‹‹ ú3
<C:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\Program.cs
Console 
. 
Clear 
( 
) 
; 
GameSeaBattle 
CurrentGame 
= 
new 
GameSeaBattle  -
(- .
). /
;/ 0
bool 
p1 
= 	
false
 
, 
p2 
= 
false 
; 
do

 
{ 
Console 
. 
	WriteLine 
( 
$" 
$str -
"- .
). /
;/ 0
Console 
. 
	WriteLine 
( 
$" 
$str '
"' (
)( )
;) *
var 
login 
= 
Console 
. 
ReadLine  
(  !
)! "
;" #
Console 
. 
	WriteLine 
( 
$" 
$str (
"( )
)) *
;* +
var 
password 
= 
Console 
. 
ReadLine #
(# $
)$ %
;% &
if 
( 
! 	
	Authorize	 
. 
AuthorizePlayer "
(" #
login# (
,( )
password* 2
)2 3
)3 4
Console 
. 
	WriteLine 
( 
$" 
$str @
"@ A
)A B
;B C
else 
p1 

= 
true 
; 
} 
while 
( 	
!	 

p1
 
) 
; 
do 
{ 
Console 
. 
	WriteLine 
( 
$" 
$str -
"- .
). /
;/ 0
Console 
. 
	WriteLine 
( 
$" 
$str '
"' (
)( )
;) *
var 
login 
= 
Console 
. 
ReadLine  
(  !
)! "
;" #
Console!! 
.!! 
	WriteLine!! 
(!! 
$"!! 
$str!! (
"!!( )
)!!) *
;!!* +
var"" 
password"" 
="" 
Console"" 
."" 
ReadLine"" #
(""# $
)""$ %
;""% &
if$$ 
($$ 
!$$ 	
	Authorize$$	 
.$$ 
AuthorizePlayer$$ "
($$" #
login$$# (
,$$( )
password$$* 2
)$$2 3
)$$3 4
Console%% 
.%% 
	WriteLine%% 
(%% 
$"%% 
$str%% @
"%%@ A
)%%A B
;%%B C
else&& 
p2'' 

='' 
true'' 
;'' 
}(( 
while(( 
((( 	
!((	 

p2((
 
)(( 
;(( 
do++ 
{++ 
Console,, 
.,, 
	WriteLine,, 
(,, 
$",, 
$str,, R
",,R S
),,S T
;,,T U
var-- 
InputChoice-- 
=-- 
Console-- 
.-- 
ReadLine-- &
(--& '
)--' (
;--( )
if.. 
(.. 
InputChoice.. 
==.. 
$str.. 
).. 
{// 
CurrentGame00 
.00 
Init00 
(00 
)00 
;00 
break11 
;11 
}22 
else33 
if33	 
(33 
InputChoice33 
==33 
$str33 
)33  
{44 
if55 

(55
 
CurrentGame55 
.55 
LoadLastGame55 #
(55# $
)55$ %
==55& (
true55) -
)55- .
break66 
;66 
Console77 
.77 
	WriteLine77 
(77 
$"77 
$str77 T
"77T U
)77U V
;77V W
}88 
}99 
while99 
(99 	
true99	 
)99 
;99 
Console== 
.== 
	WriteLine== 
(== 
$"== 
$str	== Ö
"
==Ö Ü
)
==Ü á
;
==á à
Console?? 
.?? 
	WriteLine?? 
(?? 
$"?? 
$str?? #
{??# $
CurrentGame??$ /
.??/ 0
CurrentTurnPlayer??0 A
}??A B
"??B C
)??C D
;??D E
CurrentGame@@ 
.@@ !
PrintForCurrentPlayer@@ !
(@@! "
)@@" #
;@@# $
boolBB 
IsFinishGameBB 
=BB 
falseBB 
;BB 
whileCC 
(CC 
!CC 
IsFinishGameCC 
)CC 
{DD 
ConsoleEE 
.EE 
WriteEE 
(EE 
$"EE 
$strEE 1
"EE1 2
)EE2 3
;EE3 4
varFF 
	InputDataFF 
=FF 
ConsoleFF 
.FF 
ReadLineFF $
(FF$ %
)FF% &
;FF& '
ifGG 
(GG 
	InputDataGG 
==GG 
$strGG 
)GG 
{HH 
CurrentGameII 
.II 
ExitAndSaveGameII #
(II# $
)II$ %
;II% &
returnJJ 
;JJ 
}KK 
CurrentGameLL 
.LL 
FireLL 
(LL 
	InputDataLL 
)LL 
;LL  
CurrentGameMM 
.MM 6
*Check50ProcentGameCompleteForCurrentPlayerMM :
(MM: ;
)MM; <
;MM< =
ifNN 
(NN 
CurrentGameNN 
.NN (
CheckEndGameForCurrentPlayerNN 0
(NN0 1
)NN1 2
)NN2 3
IsFinishGameNN4 @
=NNA B
trueNNC G
;NNG H
}OO 
ifPP 
(PP 
IsFinishGamePP 
)PP 
ConsolePP 
.PP 
	WriteLinePP #
(PP# $
$"PP$ &
$strPP& ,
{PP, -
CurrentGamePP- 8
.PP8 9
CurrentTurnPlayerPP9 J
}PPJ K
$strPPK U
"PPU V
)PPV W
;PPW X¬
FC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\PasswordStorageDB.cs
public 
static 
class 
PasswordStorageDB %
{ 
private 
static 
List 
< 
byte 
[ 
] 
> 
KnownPasswords  .
=/ 0
new1 4
List5 9
<9 :
byte: >
[> ?
]? @
>@ A
{A B
new 
byte 
[ 
] 
{ 
$num 
, 
$num 
, 
$num "
," #
$num$ &
,& '
$num( +
,+ ,
$num- 0
,0 1
$num2 5
,5 6
$num7 9
,9 :
$num; >
,> ?
$num@ C
,C D
$numE H
,H I
$numJ M
,M N
$numO R
,R S
$numT V
,V W
$numX [
,[ \
$num] _
}_ `
,` a
new 
byte 
[ 
] 
{ 
$num 
, 
$num 
, 
$num  
,  !
$num" %
,% &
$num' *
,* +
$num, .
,. /
$num0 3
,3 4
$num5 8
,8 9
$num: =
,= >
$num? A
,A B
$numC E
,E F
$numG J
,J K
$numL O
,O P
$numQ S
,S T
$numU X
,X Y
$numZ ]
}] ^
,^ _
new 
byte 
[ 
] 
{ 
$num 
, 
$num 
, 
$num  
,  !
$num" %
,% &
$num' *
,* +
$num, /
,/ 0
$num1 3
,3 4
$num5 8
,8 9
$num: =
,= >
$num? A
,A B
$numC F
,F G
$numH J
,J K
$numL N
,N O
$numP S
,S T
$numU X
,X Y
$numZ \
}\ ]
,] ^
} 
; 
public 

static 
bool 
iKnowThisHash $
($ %
byte% )
[) *
]* +
hash, 0
)0 1
{		 
return

 
KnownPasswords

 
.

 
Exists

 $
(

$ %
knowHash

% -
=>

. 0
hash

1 5
.

5 6
SequenceEqual

6 C
(

C D
knowHash

D L
)

L M
)

M N
;

N O
} 
} Ã
CC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\JsonSavePlayer.cs
public 
class 
JsonSavePlayer 
{ 
public 

string 
[ 
] 
[ 
] 
Area 
{ 
get  
;  !
set" %
;% &
}' (
public 

int 
[ 
] 
[ 
] 
MovesPlayer 
{  
get! $
;$ %
set& )
;) *
}+ ,
} ·
AC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\JsonSaveGame.cs
public 
class 
JsonSaveGame 
{ 
public 

int 

TurnNumber 
{ 
get 
;  
set! $
;$ %
}& '
public 

ETurnPlayer 
CurrentTurnPlayer (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
} Ù
CC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\JsonPlayerArea.cs
public 
class 
JsonPlayerArea 
{ 
public 

string 
[ 
] 
[ 
] 
Area 
{ 
get  
;  !
set" %
;% &
}' (
} åó
BC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\GameSeaBattle.cs
public 
class 
GameSeaBattle 
{ 
public 

int 

TurnNumber 
= 
$num 
; 
public 

string 
[ 
, 
] 
AreaPlayer1  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 

string 
[ 
, 
] 
AreaPlayer2  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 

List 
< 
( 
int 
Row 
, 
int 
Column $
)$ %
>% &
MovesPlayer1' 3
=4 5
new6 9
List: >
<> ?
(? @
int@ C
RowD G
,G H
intI L
ColumnM S
)S T
>T U
(U V
)V W
;W X
public 

List 
< 
( 
int 
Row 
, 
int 
Column $
)$ %
>% &
MovesPlayer2' 3
=4 5
new6 9
List: >
<> ?
(? @
int@ C
RowD G
,G H
intI L
ColumnM S
)S T
>T U
(U V
)V W
;W X
public

 

ETurnPlayer

 
CurrentTurnPlayer

 (
=

) *
ETurnPlayer

+ 6
.

6 7
Player1

7 >
;

> ?
public 

void 
Init 
( 
) 
{ 
var 
MatrixFirstPlayer 
= 
StaticHelper  ,
., -
GetMatrixFromFile- >
(> ?
$str	? Å
)
Å Ç
;
Ç É
var 
MatrixSecondPlayer 
=  
StaticHelper! -
.- .
GetMatrixFromFile. ?
(? @
$str	@ Ç
)
Ç É
;
É Ñ
AreaPlayer1 
= 
MatrixFirstPlayer '
;' (
AreaPlayer2 
= 
MatrixSecondPlayer (
;( )
} 
public 

void 
IncrementTurnNumber #
(# $
)$ %
{ 

TurnNumber 
= 

TurnNumber 
+  !
$num" #
;# $
} 
public 

void 
TooglePlayer 
( 
) 
{ 
if 

( 
CurrentTurnPlayer 
==  
ETurnPlayer! ,
., -
Player1- 4
)4 5
CurrentTurnPlayer6 G
=H I
ETurnPlayerJ U
.U V
Player2V ]
;] ^
else 
if 
( 
CurrentTurnPlayer "
==# %
ETurnPlayer& 1
.1 2
Player22 9
)9 :
CurrentTurnPlayer; L
=M N
ETurnPlayerO Z
.Z [
Player1[ b
;b c
Console 
. 
	WriteLine 
( 
$" 
$str +
{+ ,
CurrentTurnPlayer, =
}= >
"> ?
)? @
;@ A!
PrintForCurrentPlayer 
( 
) 
;  
} 
public   

void   
PrintForPlayer1   
(    
)    !
{!! 
Console"" 
."" 
	WriteLine"" 
("" 
$str"" 5
)""5 6
;""6 7
StaticHelper$$ 
.$$ 
PrintSeaArea$$ !
($$! "
AreaPlayer1$$" -
,$$- .
MovesPlayer1$$/ ;
,$$; <
AreaPlayer2$$= H
,$$H I
MovesPlayer2$$J V
)$$V W
;$$W X
}%% 
public&& 

void&& 
PrintForPlayer2&& 
(&&  
)&&  !
{'' 
Console(( 
.(( 
	WriteLine(( 
((( 
$str(( 5
)((5 6
;((6 7
StaticHelper** 
.** 
PrintSeaArea** !
(**! "
AreaPlayer2**" -
,**- .
MovesPlayer2**/ ;
,**; <
AreaPlayer1**= H
,**H I
MovesPlayer1**J V
)**V W
;**W X
}++ 
public,, 

void,, !
PrintForCurrentPlayer,, %
(,,% &
),,& '
{-- 
if.. 

(.. 
CurrentTurnPlayer.. 
==..  
ETurnPlayer..! ,
..., -
Player1..- 4
)..4 5
PrintForPlayer1..6 E
(..E F
)..F G
;..G H
if// 

(// 
CurrentTurnPlayer// 
==//  
ETurnPlayer//! ,
.//, -
Player2//- 4
)//4 5
PrintForPlayer2//6 E
(//E F
)//F G
;//G H
}00 
public11 

void11 $
AddPointForCurrentPlayer11 (
(11( )
(11) *
int11* -
Row11. 1
,111 2
int113 6
Column117 =
)11= >
point11? D
)11D E
{22 
if33 

(33 
CurrentTurnPlayer33 
==33  
ETurnPlayer33! ,
.33, -
Player133- 4
)334 5
MovesPlayer1336 B
.33B C
Add33C F
(33F G
point33G L
)33L M
;33M N
if44 

(44 
CurrentTurnPlayer44 
==44  
ETurnPlayer44! ,
.44, -
Player244- 4
)444 5
MovesPlayer2446 B
.44B C
Add44C F
(44F G
point44G L
)44L M
;44M N
}55 
public66 

bool66 6
*Check50ProcentGameCompleteForCurrentPlayer66 :
(66: ;
)66; <
{77 
if88 

(88 
CurrentTurnPlayer88 
==88  
ETurnPlayer88! ,
.88, -
Player188- 4
)884 5
{99 	
return:: 
StaticHelper:: 
.::  #
Is50ProcentGameComplete::  7
(::7 8
AreaPlayer2::8 C
,::C D
MovesPlayer1::E Q
)::Q R
;::R S
};; 	
if<< 

(<< 
CurrentTurnPlayer<< 
==<<  
ETurnPlayer<<! ,
.<<, -
Player2<<- 4
)<<4 5
{== 	
return>> 
StaticHelper>> 
.>>  #
Is50ProcentGameComplete>>  7
(>>7 8
AreaPlayer1>>8 C
,>>C D
MovesPlayer2>>E Q
)>>Q R
;>>R S
}?? 	
return@@ 
false@@ 
;@@ 
}AA 
publicBB 

boolBB (
CheckEndGameForCurrentPlayerBB ,
(BB, -
)BB- .
{CC 
ifDD 

(DD 
CurrentTurnPlayerDD 
==DD  
ETurnPlayerDD! ,
.DD, -
Player1DD- 4
)DD4 5
{EE 	
returnFF 
StaticHelperFF 
.FF  
	IsEndGameFF  )
(FF) *
AreaPlayer2FF* 5
,FF5 6
MovesPlayer1FF7 C
)FFC D
;FFD E
}GG 	
ifHH 

(HH 
CurrentTurnPlayerHH 
==HH  
ETurnPlayerHH! ,
.HH, -
Player2HH- 4
)HH4 5
{II 	
returnJJ 
StaticHelperJJ 
.JJ  
	IsEndGameJJ  )
(JJ) *
AreaPlayer1JJ* 5
,JJ5 6
MovesPlayer2JJ7 C
)JJC D
;JJD E
}KK 	
returnLL 
falseLL 
;LL 
}MM 
publicNN 

boolNN '
IsNewPointForCuurrentPlayerNN +
(NN+ ,
(NN, -
intNN- 0
RowNN1 4
,NN4 5
intNN6 9
ColumnNN: @
)NN@ A
pointNNB G
)NNG H
{OO 
ifPP 

(PP 
CurrentTurnPlayerPP 
==PP  
ETurnPlayerPP! ,
.PP, -
Player1PP- 4
)PP4 5
{QQ 	
returnRR 
StaticHelperRR 
.RR  

IsNewPointRR  *
(RR* +
MovesPlayer1RR+ 7
,RR7 8
pointRR9 >
)RR> ?
;RR? @
}SS 	
ifTT 

(TT 
CurrentTurnPlayerTT 
==TT  
ETurnPlayerTT! ,
.TT, -
Player2TT- 4
)TT4 5
{UU 	
returnVV 
StaticHelperVV 
.VV  

IsNewPointVV  *
(VV* +
MovesPlayer2VV+ 7
,VV7 8
pointVV9 >
)VV> ?
;VV? @
}WW 	
returnXX 
falseXX 
;XX 
}YY 
publicZZ 

boolZZ )
CheckPointHitForCurrentPlayerZZ -
(ZZ- .
(ZZ. /
intZZ/ 2
RowZZ3 6
,ZZ6 7
intZZ8 ;
ColumnZZ< B
)ZZB C
pointZZD I
)ZZI J
{[[ 
if\\ 

(\\ 
CurrentTurnPlayer\\ 
==\\  
ETurnPlayer\\! ,
.\\, -
Player1\\- 4
)\\4 5
{]] 	
return^^ 
StaticHelper^^ 
.^^  
CheckPointHit^^  -
(^^- .
AreaPlayer2^^. 9
,^^9 :
point^^; @
)^^@ A
;^^A B
}__ 	
if`` 

(`` 
CurrentTurnPlayer`` 
==``  
ETurnPlayer``! ,
.``, -
Player2``- 4
)``4 5
{aa 	
returnbb 
StaticHelperbb 
.bb  
CheckPointHitbb  -
(bb- .
AreaPlayer1bb. 9
,bb9 :
pointbb; @
)bb@ A
;bbA B
}cc 	
returndd 
falsedd 
;dd 
}ee 
publicff 

boolff *
CheckPointKillForCurrentPlayerff .
(ff. /
(ff/ 0
intff0 3
Rowff4 7
,ff7 8
intff9 <
Columnff= C
)ffC D
pointffE J
)ffJ K
{gg 
ifhh 

(hh 
CurrentTurnPlayerhh 
==hh  
ETurnPlayerhh! ,
.hh, -
Player1hh- 4
)hh4 5
{ii 	
returnjj 
StaticHelperjj 
.jj  
CheckPointKilljj  .
(jj. /
AreaPlayer2jj/ :
,jj: ;
MovesPlayer1jj< H
,jjH I
pointjjJ O
)jjO P
;jjP Q
}kk 	
ifll 

(ll 
CurrentTurnPlayerll 
==ll  
ETurnPlayerll! ,
.ll, -
Player2ll- 4
)ll4 5
{mm 	
returnnn 
StaticHelpernn 
.nn  
CheckPointKillnn  .
(nn. /
AreaPlayer1nn/ :
,nn: ;
MovesPlayer2nn< H
,nnH I
pointnnJ O
)nnO P
;nnP Q
}oo 	
returnpp 
falsepp 
;pp 
}qq 
publicrr 

voidrr !
AddPointsAroundFigurerr %
(rr% &
(rr& '
intrr' *
Rowrr+ .
,rr. /
intrr0 3
Columnrr4 :
)rr: ;
pointrr< A
)rrA B
{ss 
iftt 

(tt 
CurrentTurnPlayertt 
==tt  
ETurnPlayertt! ,
.tt, -
Player1tt- 4
)tt4 5
{uu 	
varvv 
Pointsvv 
=vv 
StaticHelpervv %
.vv% &
GetPointArounFigurevv& 9
(vv9 :
AreaPlayer2vv: E
,vvE F
MovesPlayer1vvG S
,vvS T
pointvvU Z
)vvZ [
;vv[ \
varww 
CloneMovesPlayer1ww !
=ww" #
newww$ '
Listww( ,
<ww, -
(ww- .
intww. 1
Rowww2 5
,ww5 6
intww7 :
Columnww; A
)wwA B
>wwB C
(wwC D
MovesPlayer1wwD P
)wwP Q
;wwQ R
Pointsyy 
.yy 
ForEachyy 
(yy 
Pointyy  
=>yy! #
{zz 
var{{ 
IsExists{{ 
={{ 
CloneMovesPlayer1{{ 0
.{{0 1
Exists{{1 7
({{7 8
Move{{8 <
=>{{= ?
Move{{@ D
.{{D E
Row{{E H
=={{I K
Point{{L Q
.{{Q R
Row{{R U
&&{{V X
Move{{Y ]
.{{] ^
Column{{^ d
=={{e g
Point{{h m
.{{m n
Column{{n t
){{t u
;{{u v
if|| 
(|| 
!|| 
IsExists|| 
)|| 
MovesPlayer1|| +
.||+ ,
Add||, /
(||/ 0
Point||0 5
)||5 6
;||6 7
}}} 
)}} 
;}} 
}~~ 	
if 

( 
CurrentTurnPlayer 
==  
ETurnPlayer! ,
., -
Player2- 4
)4 5
{
ÄÄ 	
var
ÅÅ 
Points
ÅÅ 
=
ÅÅ 
StaticHelper
ÅÅ %
.
ÅÅ% &!
GetPointArounFigure
ÅÅ& 9
(
ÅÅ9 :
AreaPlayer1
ÅÅ: E
,
ÅÅE F
MovesPlayer2
ÅÅG S
,
ÅÅS T
point
ÅÅU Z
)
ÅÅZ [
;
ÅÅ[ \
var
ÉÉ 
CloneMovesPlayer2
ÉÉ !
=
ÉÉ" #
new
ÉÉ$ '
List
ÉÉ( ,
<
ÉÉ, -
(
ÉÉ- .
int
ÉÉ. 1
Row
ÉÉ2 5
,
ÉÉ5 6
int
ÉÉ7 :
Column
ÉÉ; A
)
ÉÉA B
>
ÉÉB C
(
ÉÉC D
MovesPlayer2
ÉÉD P
)
ÉÉP Q
;
ÉÉQ R
Points
ÖÖ 
.
ÖÖ 
ForEach
ÖÖ 
(
ÖÖ 
Point
ÖÖ  
=>
ÖÖ! #
{
ÜÜ 
var
áá 
IsExists
áá 
=
áá 
CloneMovesPlayer2
áá 0
.
áá0 1
Exists
áá1 7
(
áá7 8
Move
áá8 <
=>
áá= ?
Move
áá@ D
.
ááD E
Row
ááE H
==
ááI K
Point
ááL Q
.
ááQ R
Row
ááR U
&&
ááV X
Move
ááY ]
.
áá] ^
Column
áá^ d
==
ááe g
Point
ááh m
.
áám n
Column
áán t
)
áát u
;
ááu v
if
àà 
(
àà 
!
àà 
IsExists
àà 
)
àà 
MovesPlayer2
àà +
.
àà+ ,
Add
àà, /
(
àà/ 0
Point
àà0 5
)
àà5 6
;
àà6 7
}
ââ 
)
ââ 
;
ââ 
}
ää 	
}
ãã 
public
çç 
$
ETypeResponceAfterFire
çç !
Fire
çç" &
(
çç& '
string
çç' -
	inputText
çç. 7
)
çç7 8
{
éé 
var
êê 
(
êê 
RowInt
êê 
,
êê 
	ColumnInt
êê 
,
êê 
	isPointOk
êê  )
)
êê) *
=
êê+ ,
StaticHelper
êê- 9
.
êê9 :!
InfoAboutInputPoint
êê: M
(
êêM N
	inputText
êêN W
)
êêW X
;
êêX Y
var
ëë 
point
ëë 
=
ëë 
(
ëë 
RowInt
ëë 
,
ëë 
	ColumnInt
ëë &
)
ëë& '
;
ëë' (
if
ìì 

(
ìì 
!
ìì 
	isPointOk
ìì 
)
ìì 
{
îî 	
Console
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$"
ïï  
$str
ïï  5
{
ïï5 6
	inputText
ïï6 ?
}
ïï? @
$str
ïï@ M
"
ïïM N
)
ïïN O
;
ïïO P
return
ññ $
ETypeResponceAfterFire
ññ )
.
ññ) *
NotValidPoint
ññ* 7
;
ññ7 8
}
óó 	
var
ôô 

isNewPoint
ôô 
=
ôô )
IsNewPointForCuurrentPlayer
ôô 4
(
ôô4 5
point
ôô5 :
)
ôô: ;
;
ôô; <
if
öö 

(
öö 
!
öö 

isNewPoint
öö 
)
öö 
{
õõ 	
Console
úú 
.
úú 
	WriteLine
úú 
(
úú 
$"
úú  
$str
úú  5
{
úú5 6
	inputText
úú6 ?
}
úú? @
$str
úú@ U
"
úúU V
)
úúV W
;
úúW X
return
ùù $
ETypeResponceAfterFire
ùù )
.
ùù) *
Used
ùù* .
;
ùù. /
}
ûû 	&
AddPointForCurrentPlayer
††  
(
††  !
point
††! &
)
††& '
;
††' (
var
¢¢ 
IsHit
¢¢ 
=
¢¢ +
CheckPointHitForCurrentPlayer
¢¢ 1
(
¢¢1 2
point
¢¢2 7
)
¢¢7 8
;
¢¢8 9
if
§§ 

(
§§ 
!
§§ 
IsHit
§§ 
)
§§ 
{
•• 	
Console
¶¶ 
.
¶¶ 
	WriteLine
¶¶ 
(
¶¶ 
$str
¶¶ &
)
¶¶& '
;
¶¶' (
TooglePlayer
ßß 
(
ßß 
)
ßß 
;
ßß 
return
®® $
ETypeResponceAfterFire
®® )
.
®®) *
NotHit
®®* 0
;
®®0 1
}
©© 	
var
´´ 
IsKill
´´ 
=
´´ ,
CheckPointKillForCurrentPlayer
´´ 3
(
´´3 4
point
´´4 9
)
´´9 :
;
´´: ;
if
≠≠ 

(
≠≠ 
IsKill
≠≠ 
)
≠≠ 
{
ÆÆ 	
Console
ØØ 
.
ØØ 
	WriteLine
ØØ 
(
ØØ 
$str
ØØ $
)
ØØ$ %
;
ØØ% &#
AddPointsAroundFigure
∞∞ !
(
∞∞! "
point
∞∞" '
)
∞∞' (
;
∞∞( )
}
±± 	
else
≤≤ 
{
≥≥ 	
Console
¥¥ 
.
¥¥ 
	WriteLine
¥¥ 
(
¥¥ 
$str
¥¥ %
)
¥¥% &
;
¥¥& '
}
µµ 	#
PrintForCurrentPlayer
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂  !
IncrementTurnNumber
∑∑ 
(
∑∑ 
)
∑∑ 
;
∑∑ 
return
ππ 
IsKill
ππ 
?
ππ $
ETypeResponceAfterFire
ππ .
.
ππ. /
Kill
ππ/ 3
:
ππ4 5$
ETypeResponceAfterFire
ππ6 L
.
ππL M
Hit
ππM P
;
ππP Q
}
∫∫ 
public
ΩΩ 

void
ΩΩ 
ExitAndSaveGame
ΩΩ 
(
ΩΩ  
)
ΩΩ  !
{
ææ 
StaticHelper
øø 
.
øø 
SaveGameInFile
øø #
(
øø# $
this
øø$ (
)
øø( )
;
øø) *
}
¿¿ 
public
¡¡ 

bool
¡¡ 
LoadLastGame
¡¡ 
(
¡¡ 
)
¡¡ 
{
¬¬ 
return
√√ 
StaticHelper
√√ 
.
√√ 
LoadGameFromFile
√√ ,
(
√√, -
this
√√- 1
)
√√1 2
;
√√2 3
}
ƒƒ 
}≈≈ ∆
KC:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\ETypeResponceAfterFire.cs
public 
enum "
ETypeResponceAfterFire "
{ 
Hit 
= 	
$num
 
, 
Kill 
=	 

$num 
, 
NotValidPoint 
= 
$num 
, 
NotHit 

= 
$num 
, 
Used 
=	 

$num 
, 
Other 	
=
 
$num 
, 
}		 £
@C:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\ETurnPlayer.cs
public 
enum 
ETurnPlayer 
{ 
Player1 
= 
$num 
, 
Player2 
= 
$num 
, 
} ı
>C:\Users\zebra\Desktop\–ê—Ä—Ö–∏–≤\laba3\SeaBattle\Authorize.cs
public 
static 
class 
	Authorize 
{ 
private 
static 
string 
MySalt  
=! "
$str# L
;L M
public 

static 
bool 
AuthorizePlayer &
(& '
string' -
login. 3
,3 4
string5 ;
password< D
)D E
{ 
var 

textForMD5 
= 
$" 
{ 
login !
}! "
{" #
password# +
}+ ,
{, -
MySalt- 3
}3 4
"4 5
;5 6
byte 
[ 
] 
hash 
; 
using 
( 
MD5 
md5 
= 
MD5 
. 
Create #
(# $
)$ %
)% &
{ 	
hash 
= 
md5 
. 
ComputeHash "
(" #
Encoding# +
.+ ,
UTF8, 0
.0 1
GetBytes1 9
(9 :

textForMD5: D
)D E
)E F
;F G
} 	
return!! 
PasswordStorageDB!!  
.!!  !
iKnowThisHash!!! .
(!!. /
hash!!/ 3
)!!3 4
;!!4 5
}"" 
}## 